resource_types:
- name: terraform
  type: docker-image
  source:
    repository: ljfranklin/terraform-resource
resources:
- name: bosh-lite-pipeline
  type: git
  webhook_token: foo
  check_every: 24h
  source:
    uri: https://github.com/DanielJonesEB/bosh-lite-pipeline.git
- name: ci-bucket
  type: terraform
  source:
    storage:
      bucket_path: terraform/ci/
      << : &tf-storage
        bucket: bosh-lite-pipeline
        access_key_id: ((concourse_ci_s3_access_key))
        secret_access_key: ((concourse_ci_s3_secret_key))
    << : &tf-vars
      vars:
        region: us-east-1
    << : &tf-env
      env:
        AWS_ACCESS_KEY_ID: ((concourse_ci_s3_access_key))
        AWS_SECRET_ACCESS_KEY: ((concourse_ci_s3_secret_key))
- name: iaas
  type: terraform
  source:
    storage:
      bucket_path: terraform/global
      <<: *tf-storage
    << : *tf-vars
    << : *tf-env
- name: private-key
  type: s3
  source:
    bucket: bosh-lite-pipeline
    versioned_file: private-key/id_rsa
    access_key_id: ((concourse_ci_s3_access_key))
    secret_access_key: ((concourse_ci_s3_secret_key))
- name: per-bosh-tf
  type: terraform
  source:
    storage:
      bucket_path: terraform/per-bosh
      <<: *tf-storage
    << : *tf-vars
    << : *tf-env
- name: bosh-deployment
  type: git
  check_every: 24h
  source:
    uri: https://github.com/cloudfoundry/bosh-deployment.git
- name: unpaved
  type: pool
  source:
    uri: git@github.com:DanielJonesEB/bosh-lite-pools.git
    branch: master
    pool: unpaved
    private_key: ((github_private_key))
- name: paved
  type: pool
  source:
    uri: git@github.com:DanielJonesEB/bosh-lite-pools.git
    branch: master
    pool: paved
    private_key: ((github_private_key))
- name: director-deployed
  type: pool
  source:
    pool: director-deployed
    uri: git@github.com:DanielJonesEB/bosh-lite-pools.git
    branch: master
    private_key: ((github_private_key))

jobs:
- name: setup-ci-bucket
  plan:
  - get: bosh-lite-pipeline
    trigger: true
  - put: ci-bucket
    params:
      terraform_source: bosh-lite-pipeline/terraform/ci
      env_name: test-pool
- name: prepare-global
  plan:
  - get: bosh-lite-pipeline
    trigger: true
    passed: [setup-ci-bucket]
  - task: generate-private-key
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: engineerbetter/pcf-ops
      outputs:
      - name: private-key
      run:
        path: /bin/sh
        args:
        - -xc
        - |
          ssh-keygen -N '' -f "private-key/id_rsa"
  - put: iaas
    params:
      terraform_source: bosh-lite-pipeline/terraform/global
      env_name: test-pool
      vars:
        key_dir: private-key
  - put: private-key
    params:
      file: private-key/id_rsa
- name: acquire-unpaved
  plan:
  - get: iaas
    passed: [prepare-global]
    trigger: true
  - get: unpaved
    trigger: true
  - put: unpaved
    params:
      acquire: true
- name: terraform-one-bosh
  serial: true
  plan:
  - get: bosh-lite-pipeline
    passed: [prepare-global]
  - get: unpaved
    passed: [acquire-unpaved]
    trigger: true
  - task: get-env-name
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: engineerbetter/pcf-ops
      inputs:
      - name: unpaved
      outputs:
      - name: env-name-vars
      run:
        path: /bin/sh
        args:
        - -xc
        - |
          echo 'bosh_name:' $(cat unpaved/name) > env-name-vars/vars.yml
  - put: per-bosh-tf
    params:
      terraform_source: bosh-lite-pipeline/terraform/per-bosh
      env_name: test-pool
      var_files:
      - env-name-vars/vars.yml
  - put: paved
    params:
      add_claimed: unpaved
  - put: unpaved
    params:
      remove: unpaved

- name: deploy-bosh-lite
  plan:
  - get: iaas
    passed: [prepare-global]
  - get: per-bosh-tf
    passed: [terraform-one-bosh]
  - get: paved
    passed: [terraform-one-bosh]
    trigger: true
  - get: bosh-deployment
  - get: private-key
    passed: [prepare-global]
  - task: bosh-create-env
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: engineerbetter/pcf-ops
      inputs:
      - name: iaas
      - name: per-bosh-tf
      - name: bosh-deployment
      - name: paved
      - name: private-key
      outputs:
      - name: deployment-state
      run:
        path: /bin/sh
        args:
        - -euxc
        - |
          eval "$(yml2env iaas/metadata --eval)"
          eval "$(yml2env per-bosh-tf/metadata --eval)"
          BOSH_LITE_NAME="$(cat paved/name)"
          PRIVATE_KEY_FILE=private-key/id_rsa

          bosh create-env bosh-deployment/bosh.yml \
          --state="state.json" \
          --vars-store="vars.yml" \
          -o bosh-deployment/aws/cpi.yml \
          -o bosh-deployment/bosh-lite.yml \
          -o bosh-deployment/bosh-lite-runc.yml \
          -o bosh-deployment/external-ip-with-registry-not-recommended.yml \
          -v director_name=$BOSH_LITE_NAME \
          -v "internal_cidr=$INTERNAL_CIDR" \
          -v "internal_gw=$INTERNAL_GW" \
          -v "internal_ip=10.0.0.6" \
          -v "access_key_id=$ACCESS_KEY_ID" \
          -v "secret_access_key=$SECRET_ACCESS_KEY" \
          -v "region=$REGION" \
          -v "az=$AZ" \
          -v "default_key_name=$DEFAULT_KEY_NAME" \
          -v "default_security_groups=[$DEFAULT_SECURITY_GROUPS]" \
          --var-file "private_key=$PRIVATE_KEY_FILE" \
          -v "subnet_id=$SUBNET_ID" \
          -v "external_ip=$EXTERNAL_IP"

          mv state.json deployment-state/
          mv vars.yml deployment-state/
  - put: director-deployed
    params:
      add: paved
  - put: paved
    params:
      remove: paved

- name: reset-one-paved
  plan:
  - get: paved
  - put: paved
    params:
      acquire: true
  - put: unpaved
    params:
      add: paved
  - put: paved
    params:
      remove: paved

